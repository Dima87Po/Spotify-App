{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/spotify.service\";\nexport class NewReleasesService {\n  constructor(spotifyService) {\n    this.spotifyService = spotifyService;\n    this.newReleasesUrl = 'browse/new-releases';\n  }\n  getNewReleases() {\n    return this.spotifyService.getQuery(this.newReleasesUrl).pipe(map(res => {\n      if (!res) {\n        throw new Error('Value expected!');\n      } else {\n        const formattedItems = res.albums.items.map(({\n          id,\n          images,\n          name,\n          artists,\n          type\n        }) => ({\n          id,\n          images,\n          name,\n          artists,\n          type\n        }));\n        return formattedItems;\n      }\n    }), catchError(err => {\n      throw new Error(err.message);\n    }));\n  }\n}\nNewReleasesService.ɵfac = function NewReleasesService_Factory(t) {\n  return new (t || NewReleasesService)(i0.ɵɵinject(i1.SpotifyService));\n};\nNewReleasesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: NewReleasesService,\n  factory: NewReleasesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAQhD,OAAM,MAAOC,kBAAkB;EAI7BC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;IAF1B,mBAAc,GAAW,qBAAqB;EAEA;EAE/CC,cAAc;IACnB,OAAO,IAAI,CAACD,cAAc,CAACE,QAAQ,CAAC,IAAI,CAACC,cAAc,CAAC,CAACC,IAAI,CAC3DR,GAAG,CAAES,GAAmB,IAAI;MAC1B,IAAI,CAACA,GAAG,EAAE;QACR,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;OACnC,MAAM;QACL,MAAMC,cAAc,GAA2BF,GAAG,CAACG,MAAM,CAACC,KAAK,CAACb,GAAG,CAAC,CAClE;UAAEc,EAAE;UAAEC,MAAM;UAAEC,IAAI;UAAEC,OAAO;UAAEC;QAAI,CAAE,MACnC;UAAEJ,EAAE;UAAEC,MAAM;UAAEC,IAAI;UAAEC,OAAO;UAAEC;QAAI,CAAE,CAClC,CAAC;QACJ,OAAOP,cAAc;;IAEzB,CAAC,CAAC,EACFV,UAAU,CAAEkB,GAAG,IAAI;MACjB,MAAM,IAAIT,KAAK,CAACS,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,CAAC;EACP;;AAtBWlB,kBAAkB;mBAAlBA,kBAAkB;AAAA;AAAlBA,kBAAkB;SAAlBA,kBAAkB;EAAAmB,SAAlBnB,kBAAkB;EAAAoB,YAHf;AAAM","names":["map","catchError","NewReleasesService","constructor","spotifyService","getNewReleases","getQuery","newReleasesUrl","pipe","res","Error","formattedItems","albums","items","id","images","name","artists","type","err","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/blackleadstudio1/Documents/GitHub/Spotify-App/src/app/pages/home/new-releases-service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { APINewReleases, FormattedNewReleases } from 'src/app/pages/home/models/new-releases-model';\nimport { SpotifyService } from 'src/app/services/spotify.service';\n\n@Injectable({\n    providedIn: 'root'\n}) \n\nexport class NewReleasesService {\n  \n  private newReleasesUrl: string = 'browse/new-releases';\n\n  constructor(private spotifyService: SpotifyService) { }\n    \n  public getNewReleases(): Observable<FormattedNewReleases[]> {\n    return this.spotifyService.getQuery(this.newReleasesUrl).pipe(\n      map((res: APINewReleases) => {\n        if (!res) {\n          throw new Error('Value expected!');\n        } else {\n          const formattedItems: FormattedNewReleases[] = res.albums.items.map((\n            { id, images, name, artists, type }) => (\n            { id, images, name, artists, type }\n            ));\n          return formattedItems;\n        }\n      }),\n      catchError((err) => {\n        throw new Error(err.message);\n      }));\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}