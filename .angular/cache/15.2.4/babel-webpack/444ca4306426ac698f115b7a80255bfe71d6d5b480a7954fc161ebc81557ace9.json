{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/spotify.service\";\nexport class SearchService {\n  constructor(spotifyService) {\n    this.spotifyService = spotifyService;\n  }\n  // get both tracks and artist from spotify\n  getTracksAndArtists(term) {\n    const searchUrl = `search?q=${term}&type=track%2Cartist`;\n    return this.spotifyService.getQuery(searchUrl).pipe(map(res => {\n      if (!res) {\n        throw new Error('Value expected!');\n      } else {\n        console.log('res:', res);\n        return res;\n      }\n    }), catchError(err => {\n      throw new Error(err.message);\n    }));\n  }\n}\nSearchService.ɵfac = function SearchService_Factory(t) {\n  return new (t || SearchService)(i0.ɵɵinject(i1.SpotifyService));\n};\nSearchService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: SearchService,\n  factory: SearchService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAOhD,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB;EAEtD;EACOC,mBAAmB,CAACC,IAAY;IACrC,MAAMC,SAAS,GAAW,YAAYD,IAAI,sBAAsB;IAEhE,OAAO,IAAI,CAACF,cAAc,CAACI,QAAQ,CAACD,SAAS,CAAC,CAACE,IAAI,CACjDT,GAAG,CAAEU,GAAgB,IAAI;MACvB,IAAI,CAACA,GAAG,EAAE;QACR,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;OACnC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,MAAM,EAAEH,GAAG,CAAC;QACxB,OAAOA,GAAG;;IAEd,CAAC,CAAC,EACFT,UAAU,CAAEa,GAAG,IAAI;MACjB,MAAM,IAAIH,KAAK,CAACG,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;;AApBWb,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAc,SAAbd,aAAa;EAAAe,YAFZ;AAAM","names":["map","catchError","SearchService","constructor","spotifyService","getTracksAndArtists","term","searchUrl","getQuery","pipe","res","Error","console","log","err","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/blackleadstudio1/Documents/GitHub/Spotify-App/src/app/pages/search/search.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { SpotifyService } from 'src/app/services/spotify.service';\nimport { APISearch } from './models/search-model';\n\n@Injectable({\n  providedIn: 'root'\n}) \nexport class SearchService {\n  constructor(private spotifyService: SpotifyService) { }\n\n  // get both tracks and artist from spotify\n  public getTracksAndArtists(term: string): Observable<APISearch[]> {\n    const searchUrl: string = `search?q=${term}&type=track%2Cartist`;\n\n    return this.spotifyService.getQuery(searchUrl).pipe(\n      map((res: APISearch[]) => {\n        if (!res) {\n          throw new Error('Value expected!');\n        } else {\n          console.log('res:', res);\n          return res;\n        }\n      }),\n      catchError((err) => {\n        throw new Error(err.message);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}