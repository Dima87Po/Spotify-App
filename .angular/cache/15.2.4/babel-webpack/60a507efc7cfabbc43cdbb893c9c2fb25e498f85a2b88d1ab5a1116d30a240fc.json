{"ast":null,"code":"import { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/spotify.service\";\n// import { APIArtistTracks } from '../models/artist-top-track-model';\nexport class ArtistService {\n  constructor(spotifyService) {\n    this.spotifyService = spotifyService;\n  }\n  // get artist info\n  getArtist(artistId) {\n    const artistUrl = `artists/${artistId}`;\n    return this.spotifyService.getQuery(artistUrl).pipe(map(res => {\n      if (!res) {\n        throw new Error('Value expected!');\n      } else {\n        return res;\n      }\n    }), catchError(err => {\n      throw new Error(err.message);\n    }));\n  }\n  // get artist top tracks\n  // public getTopTracks(artistId: string): Observable<APIArtistTracks[]> {\n  //   const artistUrl: string = `artists/${ artistId }/top-tracks?country=us`;\n  //   return this.spotifyService.getQuery(artistUrl).pipe(\n  //     map((res: APIArtistTracks[]) => {\n  //       if (!res) {\n  //         throw new Error('Value expected!');\n  //       } else {\n  //         return res['tracks'];\n  //       }\n  //     }),\n  //     catchError((err) => {\n  //       throw new Error(err.message);\n  //     }));\n  // }\n  // get artist top tracks\n  getAlbums(artistId) {\n    const albumUrl = `artists/${artistId}/albums`;\n    return this.spotifyService.getQuery(albumUrl).pipe(map(res => {\n      if (!res) {\n        throw new Error('Value expected!');\n      } else {\n        return res.items;\n      }\n    }), catchError(err => {\n      throw new Error(err.message);\n    }));\n  }\n}\nArtistService.ɵfac = function ArtistService_Factory(t) {\n  return new (t || ArtistService)(i0.ɵɵinject(i1.SpotifyService));\n};\nArtistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ArtistService,\n  factory: ArtistService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAShD;AAKA,OAAM,MAAOC,aAAa;EAExBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAA8B;EAEhE;EACOC,SAAS,CAACC,QAAgB;IAC/B,MAAMC,SAAS,GAAW,WAAYD,QAAS,EAAE;IAEjD,OAAO,IAAI,CAACF,cAAc,CAACI,QAAQ,CAACD,SAAS,CAAC,CAACE,IAAI,CACjDR,GAAG,CAAES,GAAc,IAAI;MACrB,IAAI,CAACA,GAAG,EAAE;QACR,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;OACnC,MAAM;QACL,OAAOD,GAAG;;IAEd,CAAC,CAAC,EACFV,UAAU,CAAEY,GAAG,IAAI;MACjB,MAAM,IAAID,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,CAAC;EACP;EAEA;EACA;EACA;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EAEA;EACOC,SAAS,CAACR,QAAgB;IAC/B,MAAMS,QAAQ,GAAW,WAAYT,QAAS,SAAS;IAEvD,OAAO,IAAI,CAACF,cAAc,CAACI,QAAQ,CAACO,QAAQ,CAAC,CAACN,IAAI,CAChDR,GAAG,CAAES,GAAoB,IAAI;MAC3B,IAAI,CAACA,GAAG,EAAE;QACR,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;OACnC,MAAM;QACL,OAAOD,GAAG,CAACM,KAAK;;IAEpB,CAAC,CAAC,EACFhB,UAAU,CAAEY,GAAG,IAAI;MACjB,MAAM,IAAID,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,CAAC;EACP;;AArDWX,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAe,SAAbf,aAAa;EAAAgB,YAFZ;AAAM","names":["catchError","map","ArtistService","constructor","spotifyService","getArtist","artistId","artistUrl","getQuery","pipe","res","Error","err","message","getAlbums","albumUrl","items","factory","providedIn"],"sourceRoot":"","sources":["/Users/blackleadstudio1/Documents/GitHub/Spotify-App/src/app/pages/artist/services/artist.service.ts"],"sourcesContent":["import { catchError, map } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { SpotifyService } from 'src/app/services/spotify.service';\n\n// Models\nimport { APIArtist } from '../models/artist-model';\nimport { AlbumItem, APIArtistAlbums } from '../models/artist-albums';\n// import { APIArtistTracks } from '../models/artist-top-track-model';\n\n@Injectable({\n  providedIn: 'root'\n}) // service provided in Artist module\nexport class ArtistService {\n\n  constructor(private spotifyService: SpotifyService) { /*empty*/ }\n\n  // get artist info\n  public getArtist(artistId: string): Observable<APIArtist> {\n    const artistUrl: string = `artists/${ artistId }`;\n\n    return this.spotifyService.getQuery(artistUrl).pipe(\n      map((res: APIArtist) => {\n        if (!res) {\n          throw new Error('Value expected!');\n        } else {\n          return res;\n        }\n      }),\n      catchError((err) => {\n        throw new Error(err.message);\n      }));\n  }\n\n  // get artist top tracks\n  // public getTopTracks(artistId: string): Observable<APIArtistTracks[]> {\n  //   const artistUrl: string = `artists/${ artistId }/top-tracks?country=us`;\n\n  //   return this.spotifyService.getQuery(artistUrl).pipe(\n  //     map((res: APIArtistTracks[]) => {\n  //       if (!res) {\n  //         throw new Error('Value expected!');\n  //       } else {\n  //         return res['tracks'];\n  //       }\n  //     }),\n  //     catchError((err) => {\n  //       throw new Error(err.message);\n  //     }));\n  // }\n\n  // get artist top tracks\n  public getAlbums(artistId: string): Observable<AlbumItem[]> {\n    const albumUrl: string = `artists/${ artistId }/albums`;\n\n    return this.spotifyService.getQuery(albumUrl).pipe(\n      map((res: APIArtistAlbums) => {\n        if (!res) {\n          throw new Error('Value expected!');\n        } else {\n          return res.items;\n        }\n      }),\n      catchError((err) => {\n        throw new Error(err.message);\n      }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}