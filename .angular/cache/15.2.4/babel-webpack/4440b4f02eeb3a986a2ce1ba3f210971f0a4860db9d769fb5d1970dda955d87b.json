{"ast":null,"code":"import { catchError, map } from \"rxjs/operators\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/spotify.service\";\nexport class ArtistService {\n  constructor(spotifyService) {\n    this.spotifyService = spotifyService;\n  }\n  getArtist(artistId) {\n    const artistUrl = `artists/${artistId}`;\n    return this.spotifyService.getQuery(artistUrl).pipe(map(res => {\n      if (!res) {\n        throw new Error(\"Value expected!\");\n      } else {\n        return res;\n      }\n    }), catchError(err => {\n      throw new Error(err.message);\n    }));\n  }\n  getAlbums(artistId) {\n    const albumUrl = `artists/${artistId}/albums`;\n    return this.spotifyService.getQuery(albumUrl).pipe(map(res => {\n      if (!res) {\n        throw new Error(\"Value expected!\");\n      } else {\n        return res.items;\n      }\n    }), catchError(err => {\n      throw new Error(err.message);\n    }));\n  }\n}\nArtistService.ɵfac = function ArtistService_Factory(t) {\n  return new (t || ArtistService)(i0.ɵɵinject(i1.SpotifyService));\n};\nArtistService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ArtistService,\n  factory: ArtistService.ɵfac,\n  providedIn: \"root\"\n});","map":{"version":3,"mappings":"AAAA,SAASA,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAWhD,OAAM,MAAOC,aAAa;EACxBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAmB;EAE9CC,SAAS,CAACC,QAAgB;IAC/B,MAAMC,SAAS,GAAW,WAAWD,QAAQ,EAAE;IAE/C,OAAO,IAAI,CAACF,cAAc,CAACI,QAAQ,CAACD,SAAS,CAAC,CAACE,IAAI,CACjDR,GAAG,CAAES,GAAc,IAAI;MACrB,IAAI,CAACA,GAAG,EAAE;QACR,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;OACnC,MAAM;QACL,OAAOD,GAAG;;IAEd,CAAC,CAAC,EACFV,UAAU,CAAEY,GAAG,IAAI;MACjB,MAAM,IAAID,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;EAEOC,SAAS,CAACR,QAAgB;IAC/B,MAAMS,QAAQ,GAAW,WAAWT,QAAQ,SAAS;IAErD,OAAO,IAAI,CAACF,cAAc,CAACI,QAAQ,CAACO,QAAQ,CAAC,CAACN,IAAI,CAChDR,GAAG,CAAES,GAAoB,IAAI;MAC3B,IAAI,CAACA,GAAG,EAAE;QACR,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;OACnC,MAAM;QACL,OAAOD,GAAG,CAACM,KAAK;;IAEpB,CAAC,CAAC,EACFhB,UAAU,CAAEY,GAAG,IAAI;MACjB,MAAM,IAAID,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,CACH;EACH;;AAnCWX,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;SAAbA,aAAa;EAAAe,SAAbf,aAAa;EAAAgB,YAFZ;AAAM","names":["catchError","map","ArtistService","constructor","spotifyService","getArtist","artistId","artistUrl","getQuery","pipe","res","Error","err","message","getAlbums","albumUrl","items","factory","providedIn"],"sourceRoot":"","sources":["/Users/blackleadstudio1/Documents/GitHub/Spotify-App/src/app/pages/artist/services/artist.service.ts"],"sourcesContent":["import { catchError, map } from \"rxjs/operators\";\nimport { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\nimport { SpotifyService } from \"src/app/services/spotify.service\";\nimport { APIArtist } from \"../models/artist-model\";\nimport { AlbumItem, APIArtistAlbums } from \"../models/artist-albums\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class ArtistService {\n  constructor(private spotifyService: SpotifyService) {}\n\n  public getArtist(artistId: string): Observable<APIArtist> {\n    const artistUrl: string = `artists/${artistId}`;\n\n    return this.spotifyService.getQuery(artistUrl).pipe(\n      map((res: APIArtist) => {\n        if (!res) {\n          throw new Error(\"Value expected!\");\n        } else {\n          return res;\n        }\n      }),\n      catchError((err) => {\n        throw new Error(err.message);\n      })\n    );\n  }\n\n  public getAlbums(artistId: string): Observable<AlbumItem[]> {\n    const albumUrl: string = `artists/${artistId}/albums`;\n\n    return this.spotifyService.getQuery(albumUrl).pipe(\n      map((res: APIArtistAlbums) => {\n        if (!res) {\n          throw new Error(\"Value expected!\");\n        } else {\n          return res.items;\n        }\n      }),\n      catchError((err) => {\n        throw new Error(err.message);\n      })\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}