{"ast":null,"code":"import { map, catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/spotify.service\";\nexport class AlbumService {\n  constructor(spotifyService) {\n    this.spotifyService = spotifyService;\n  }\n  // get album info\n  getAlbum(albumId) {\n    const albumUrl = `albums/${albumId}`;\n    return this.spotifyService.getQuery(albumUrl).pipe(map(res => {\n      if (!res) {\n        throw new Error('Value expected!');\n      } else {\n        return res;\n      }\n    }), catchError(err => {\n      throw new Error(err.message);\n    }));\n  }\n}\nAlbumService.ɵfac = function AlbumService_Factory(t) {\n  return new (t || AlbumService)(i0.ɵɵinject(i1.SpotifyService));\n};\nAlbumService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AlbumService,\n  factory: AlbumService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,EAAEC,UAAU,QAAQ,gBAAgB;;;AAUhD,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,cAA8B;IAA9B,mBAAc,GAAdA,cAAc;EAAoB;EAEtD;EACOC,QAAQ,CAACC,OAAe;IAC7B,MAAMC,QAAQ,GAAW,UAAWD,OAAQ,EAAE;IAE9C,OAAO,IAAI,CAACF,cAAc,CAACI,QAAQ,CAACD,QAAQ,CAAC,CAACE,IAAI,CAChDT,GAAG,CAAEU,GAAc,IAAI;MACrB,IAAI,CAACA,GAAG,EAAE;QACR,MAAM,IAAIC,KAAK,CAAC,iBAAiB,CAAC;OACnC,MAAM;QACL,OAAOD,GAAG;;IAEd,CAAC,CAAC,EACFT,UAAU,CAAEW,GAAG,IAAI;MACjB,MAAM,IAAID,KAAK,CAACC,GAAG,CAACC,OAAO,CAAC;IAC9B,CAAC,CAAC,CAAC;EACP;;AAnBWX,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAY,SAAZZ,YAAY;EAAAa,YAFX;AAAM","names":["map","catchError","AlbumService","constructor","spotifyService","getAlbum","albumId","albumUrl","getQuery","pipe","res","Error","err","message","factory","providedIn"],"sourceRoot":"","sources":["/Users/blackleadstudio1/Documents/GitHub/Spotify-App/src/app/pages/album/services/album.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { SpotifyService } from 'src/app/services/spotify.service';\n\nimport { APIAlbums } from '../models/album-model';\n\n\n\n@Injectable({\n  providedIn: 'root'\n}) // service provided in Artist module\nexport class AlbumService {\n\n  constructor(private spotifyService: SpotifyService) { }\n\n  // get album info\n  public getAlbum(albumId: string): Observable<APIAlbums> {\n    const albumUrl: string = `albums/${ albumId }`;\n\n    return this.spotifyService.getQuery(albumUrl).pipe(\n      map((res: APIAlbums) => {\n        if (!res) {\n          throw new Error('Value expected!');\n        } else {\n          return res;\n        }\n      }),\n      catchError((err) => {\n        throw new Error(err.message);\n      }));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}